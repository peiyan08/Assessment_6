Runtime:

    1.What determines the workload of figuring out whether your box of animal crackers contains an elephant?
    Answer: The worse case is the box of animal crackers does not contain an elephant.
    So, the run time is O(n).

    2. Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:
    Answer: O(1), O(log n), O(n), O(n log n), O(n^2), O(2^n)


Stacks and Queues:
    1.In the following cases, would a stack or queue be a more appropriate data structure?
        1.The process of loading and unloading pallets onto a flatbed truck
        Answer: Stacks would be appropriate. 

        2.Putting bottle caps on bottles of beer as they roll down an assembly line
        Answer: Queue would be appropriate.

        3.Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
        Answer: Stacks would be appropriate.

    2.Describe two more situations where a queue would be an appropriate data structure.
    Answer: 1) How people get served at a cafe shop. Who comes first, always get to served first. 2) People wait in line to buy ticket.

    3.Describe two more situations where a stack would be an appropriate data structure.
    Answer: 1) Go back to the previous page you just visit. 2) undo in sublime.


Linked Lists:
    1.Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)

    Answer: Nodes:box ["Apple", next], box ["Berry", next], box ["Cherry", next]. 
            Data in the nodes: Apple, Berry, Cherry
            Now, head is pointing to Apple node. No tail is being tracked.
            The attribute for LLIST's tail is Cherry node.

    2.What’s the difference between doubly- and singly-linked lists?
    Answer: singly-linked lists for every node, it only knows what is the next point they point to. Doubly-linked lists, for every node it knows the next and previous node they linked to.

    3.Why is it faster to append to a linked list if we keep track of the tail as an attribute?
    Answer: Because then we do not have to traverse the whole list in order to find the current tail.


Trees:
    1.Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
    Answer: food, Italian, Indian, Mexican, lasagna, pizza, tikka masala, saag,, burrito

    2.Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
    Answer: food, Italian, lasagna, pizza, thin crust, Chicago-style

    3.How is a binary search tree different from other trees?
    Answer: for a binary search tree, every Node only have at most 2 children, the smaller child compares to the parent lives on the left side, the larger child compares to the parent lives on the right side. So, when you search something, binanry search tree could cut down the search time from regular tree O(n) to O(log n).








































